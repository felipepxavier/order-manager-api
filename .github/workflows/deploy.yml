name: Deploy Repositories

on:
  push:
    branches:
      - main
    paths:
      - '**'
  pull_request:
    branches:
      - main
    paths:
      - '**'  

jobs:
  api-gateway:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.modified, 'api-gateway/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x' 

      - name: Install dependencies
        run: |
          npm install -g serverless  # Instala o Serverless Framework globalmente
          npm install  # Instala as dependências do projeto

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 

      - name: Deploy API Gateway Serverless
        run: |
          echo "Deploying API Gateway Serverless"
          serverless deploy --stage prod  # Executa o deploy usando o Serverless Framework

  api-rest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          IMAGE_NAME="api-order-manager"
          IMAGE_TAG="${GITHUB_SHA}"  # Usando o hash do commit como tag da imagem
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          
      - name: Push Docker image to Docker Hub
        run: |
          IMAGE_NAME="api-order-manager"
          IMAGE_TAG="${GITHUB_SHA}"
          docker tag $IMAGE_NAME:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Update Kubernetes deployment with new image tag
        run: |
          IMAGE_TAG="${GITHUB_SHA}"
          sed -i "s|image: felipepxavier/api-order-manager:.*|image: ${{ secrets.DOCKER_USERNAME }}/api-order-manager:$IMAGE_TAG|" k8s/api-deployment.yml
          
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Apply Kubernetes deployment
        run: |
          kubectl apply -f k8s/api-deployment.yml

  eks-iac:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.modified, 'eks-iac/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'  
        
      - name: Change directory to eks-iac
        run: cd eks-iac

      - name: Install dependencies
        run: |
          terraform init  # Inicializa o diretório do Terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 

      - name: Apply Terraform infrastructure
        run: |
          echo "Applying Terraform configuration for EKS"
          terraform apply -auto-approve  # Aplica a configuração do Terraform automaticamente

  rds-iac:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.modified, 'rds-iac/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'  

      - name: Change directory to rds-iac
        run: cd rds-iac

      - name: Install dependencies
        run: |
          terraform init  # Inicializa o diretório do Terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 

      - name: Apply Terraform infrastructure
        run: |
          echo "Applying Terraform configuration for RDS"
          terraform apply -auto-approve  # Aplica a configuração do Terraform automaticamente


